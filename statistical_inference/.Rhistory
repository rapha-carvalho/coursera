install.packages("dplyr")
install.packages("purrr")
install.packages("swirl")
swirl::install_course("Statistical Inference")
library("swirl")
swirl()
pt(q=2.5, df=15, lower.tail = FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6, size = 8, prob = .5, lower.tail = FALSE)
pbinom(7, lower.tail = TRUE)
pbinom(7, size = 8, probability = .5, lower.tail = TRUE)
pbinom(7,lower.tail = TRUE)
pbinom(7, size = 8,\lower.tail = TRUE)
pbinom(7, size = 8,lower.tail = TRUE)
pbinom(q = 7, size = 8, prob = .5, lower.tail = TRUE)
ppois(q = 9, lambda = 5, lower.tail = FALSE)
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
examinations <- data.frame(subject, baseline, week2)
examinations
test <- t.test(x = examinations$baseline, y = examinations$week2, alt = "two.sided", paired = TRUE)
pval <- test$p.value
round(pval,3)
n <- 9
μ <- 1100
σ <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = μ + c(-1, 1) * qt(quantile, df=n-1) * σ / sqrt(n)
confidenceInterval
n <- 4
x <- 3
test <- binom.test(x=x, n=n, alt="greater")
round(test$p.value,2)
rate <- 1/100
errors <- 10
days <- 1787
test <-  poisson.test(errors, T = days, r = rate, alt="less")
round(test$p.value,2)
n_y <- 9 # subjects treated
n_x <- 9 # subjects placebo
σ_y <- 1.5# kg/m2 std.dev. treated
σ_x <- 1.8# kg/m2 std.dev. placebo
μ_y <- -3#  kg/m2 average difference treated
μ_x <- 1#  kg/m2 average difference placebo
# calculate pooled standard deviation
σ_p <- (((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
pval <- pt((μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2)
pval
library(swirl)
swirl()\
swirl()
4
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30*z, mean = 30, lower.tail = FALSE)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32, sd=1, lower.tail=FALSE)
pnorm(30+z,mean=32, sd=2, lower.tail=FALSE)
pnorm(30+z*2,mean=32, sd=2, lower.tail=FALSE)
t.test(n = 16, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n = 26, sd = 1)
power.t.test(power = .8, n = 26, sd = 1)$delta
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt =
| "one.sided")$delta
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
library(swirl)
swirl()
head(pValues)
sum(pValues <= .05)
sum(pValues < .05)
sum(p.adjust(pValues, "bonferroni"))
sum(p.adjust(pValues, method = "bonferroni") < .05)
sum(p.adjust(pValues, method = "BH") < .05)
tail(trueStatus)
kk
(false, "zero")
table(pValues2<.05, trueStatus)
0.5
24/500
table(p.adjust(trueStatus, method = "bonferroni"))
table(p.adjust(pValues2, method = "bonferroni")<.05, trueStatus)
table(p.adjust(pValues2, method = "BH")<.05, trueStatus)
library(swirl)
swirl()
3.5
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(x = fh, size = nh*B, replace =  TRUE)
resam <- matrix(B, nh)
resam <- matrix(sam, B, nh)
meds <- apply(resam, 1, median)
fh - meds
median(meds) - median(fh)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(.025, .975))
meds <- quantile(resampledMedians, c(.025, .975))
quantile(meds, c(.025, .0975))
quantile(meds, c(.025, .975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
Cdata
range(Cdata$count)
BCcounts
group
testStat
testStat(BCcounts, group)
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms <- sapply(1:10000, function(i) testStat(BCcounts, sample(group)))
perms > obs
mean(perms>obs)
testStat(DEcounts)
testStat(DEcounts, group)
perms <- sapply(1:10000, function(i) testStat(DEcounts, sample(group)))
setwd("/Users/raphaelcarvalho/Documents/Cursos/coursera/statistical_inference")
install.packages("data.table)")
setwd("/Users/raphaelcarvalho/Documents/Cursos/coursera/statistical_inference")
install.packages("data.table)"
±
install.packages("data.table")
install.packages("pdfLaTeX")
