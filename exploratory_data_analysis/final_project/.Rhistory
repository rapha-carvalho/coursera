dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
class(table(plants$Active_Growth_Period))
str(pkants)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpos(5, 10)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(cars)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
library(xlsx)
library(xlsx)
library(swirl)
swirl()
library(xlsx)
library(xlsx)
library(xlsx)
library(XML)
library(swirl)
swirl()
exit()
install.packages("RMySQL")
?library
source("https://bioconductor.org/biocLite.R")
biocLite("rdfh5")
install.packages(httr)
install.packages("httr")
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
Revoke all user tokens
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
install.packages("jsonlite")
install.packages("httpuv")
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
#install.packages("jsonlite")
library(jsonlite)
#install.packages("httpuv")
library(httpuv)
#install.packages("httr")
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Coursera Aplication",
key = "988c39b6f529d11170df",
secret = "0babf419e99cfa6897977c936937c727c50550c1")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
#install.packages("jsonlite")
library(jsonlite)
#install.packages("httpuv")
library(httpuv)
#install.packages("httr")
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Coursera Aplication",
key = "988c39b6f529d11170df",
secret = "0babf419e99cfa6897977c936937c727c50550c1")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
gitDF
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
gitDF
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
install.packages("sqldf")
?download.files
?download.file
acs <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",destfile = "/Users/raphael/coursera-repo/cleaning_data/week2_question2_dataset.csv" method = "curl")
acs <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",destfile = "/Users/raphael/coursera-repo/cleaning_data/week2_question2_dataset.csv", method = "curl")
sqldf("select * from acs where AGEP
<
< 50 and pwgtp1")
sqldf("select pwgtp1 from acs where AGEP
<
< 50")
library(sqldf)
install.packages("gsubfn")
install.packages("gsubfn")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
acs
acs <- read.csv("/Users/raphael/coursera-repo/cleaning_data/week2_question2_dataset.csv", sep = ",")
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
html <- con("http://biostat.jhsph.edu/~jleek/contact.html")
con = http://biostat.jhsph.edu/~jleek/contact.html
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
?nchar
nchar(htmlcode[:10,])
htmlCode[1:10, ]
htmlCode[1:10]
nchar(htmlCode[:10])
nchar(htmlCode[1:10])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
?read.for
??read.for
?file
zzfil <- tempfile(fileext = ".for")
file("/Users/raphael/Downloads/getdata-wksst8110.for")
strange <- file("/Users/raphael/Downloads/getdata-wksst8110.for")
head(strange)
read.table("/Users/raphael/Downloads/getdata-wksst8110.for")
source('~/coursera-repo/ProgrammingAssignment3/question1_quiz2_cleaningdata.R')
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
library(swirl)
swirl()
mydf <- read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -(X:size))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package = "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "India")
filter(cran, r_version <= "3.0.2", country IN ("India"))
info()
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US"| country == "IN")
filter(cran, size > 100500, r_os == "lunux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/chain1.R')
submit()
submit()
submit()
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/chain2.R')
submit()
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/chain3.R')
submit()
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/chain4.R')
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script1.R')
submit()
students3()
students3
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script2.R')
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script2.R')
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script2.R')
submit()
?spread()
?spread
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script3.R')
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script3.R')
submit()
library(readr)
parse_number("class5")
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script4.R')
students3
submit()
?mutate
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script4.R')
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script4.R')
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script4.R')
submit()
students4
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script5.R')
submit()
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script6.R')
submit()
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script7.R')
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script7.R')
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script7.R')
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script8.R')
submit()
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script9.R')
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script9.R')
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script9.R')
?group_by
source('/var/folders/qf/5g4767951k30zdmtdrc_4qlw0000gn/T//RtmpulwpVH/script9.R')
submit()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = /Users/raphael/coursera-repo/cleaning_data/quiz3_question_1_data.csv,method = 'curl')
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "/Users/raphael/coursera-repo/cleaning_data/quiz3_question_1_data.csv",method = 'curl')
data <- read.csv(/Users/raphael/coursera-repo/cleaning_data/quiz3_question_1_data.csv")
data <- read.csv("/Users/raphael/coursera-repo/cleaning_data/quiz3_question_1_data.csv")
str(data)
library(dplyr)
agricultureLogical <- filter(data, ACR = 3 & AGS = 6)
agricultureLogical <- filter(data, ACR == 3 & AGS == 6)
head(agricultureLogical)
which(agricultureLogical)
agricultureLogical <- data$ACS == 3 & data$AGS == 6
head(which(agricultureLogical), 3)
head(data, 3)
rm("agricultureLogical")
agricultureLogical <- data$ACS == 3 & data$AGS == 6
rm("agricultureLogical")
data$ACS
data$ACR
agricultureLogical <- data$ACR == 3 & data$AGS == 6
head(which(agricultureLogical), 3)
install.packages("jpeg")
library(jpeg)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
, '/Users/raphael/coursera-repo/cleaning_data/quiz3_question2_image.jpg'
, mode='wb' )
picture <- jpeg::readJPEG('jeff.jpg'
, native=TRUE)
picture <- jpeg::readJPEG('/Users/raphael/coursera-repo/cleaning_data/quiz3_question2_image.jpg'
, native=TRUE)
picture
quantile(picture, probs = c(0.3, 0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "/Users/raphael/coursera-repo/cleaning_data/quiz3_question_4_data_1.csv",method = 'curl')
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "/Users/raphael/coursera-repo/cleaning_data/quiz3_question_4_data_2.csv",method = 'curl')
data_gdp <- read.csv( "/Users/raphael/coursera-repo/cleaning_data/quiz3_question_4_data_1.csv")
data_country <- read.csv("/Users/raphael/coursera-repo/cleaning_data/quiz3_question_4_data_2.csv")
head(data_gdp, 3)
colnames(data_gdp)
colnames(data_country)
head(data_country)
install.packages("data.table")
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
head(fgdp)
head(FGDO)
head(FGDP)
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
)
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
nrow(mergeDT)
nrow(mergedDT)
mergedDT[order(-Rank)][13,.(Economy)]
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
FGDP
head(fgdp, 3)
head(FGDP, 3)
tail(FGDP, 3)
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
data_gdp <- read.csv( "/Users/raphael/coursera-repo/cleaning_data/quiz3_question_4_data_1.csv", sep = ",")
str(data_gdp)
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv')
str(FGDP)
tail(FGDP)
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
)
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
mergedDT[`Income Group` == "High income: OECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
mergedDT[`Income Group` == "High income: nonOECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
library('dplyr')
breaks <- quantile(mergedDT[, Rank], probs = seq(0, 1, 0.2), na.rm = TRUE)
mergedDT$quantileGDP <- cut(mergedDT[, Rank], breaks = breaks)
mergedDT[`Income Group` == "Lower middle income", .N, by = c("Income Group", "quantileGDP")]
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12)
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pollution pm25~region, col = "red")
boxplot(pollution, pm25~region, col = "red")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col == "green")
hist(east$pm25, col = "green")
west <- subset(pollution, region == "west")
hist(west$pm25, col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
plot(pollution, plot(pm25, latitude))
plot(pollution, pm25, latitude)
plot(pollution$pm25, pollution$latitude)
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region == "west")
plor(west$latitude, west$pm25, main = "West")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
getwd()
setwd("/Users/raphael/coursera-repo/coursera/exploratory_data_analysis/final_project")
library(dplyr)
SUMMARY <- readRDS("summarySCC_PM25.rds")
plot2_tbl <- SUMMARY %>% subset(fips == "24510") %>%
select(year, Emissions)
glimpse(plot2_tbl)
plot2_tbl <-plot2_tbl %>% group_by(year) %>%
summarize(Sum.Emissions = sum(Emissions, na.rm = TRUE))
plot2 <- with(plot2_tbl,
barplot(height = Sum.Emissions,
names.arg = year,
xlab = "Year",
ylab = "Total emissions (ton)",
col = "light blue",
main = "Total sum of Emissions in Baltimore per year"
)
)
dev.copy(png, file = "plot2.png", width=480, height=480)
dev.off()
dev.copy(png, file = "final_plot2.png", width=480, height=480)
dev.off()
